
Testing_P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd0  08002cd0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd0  08002cd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08002d48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002d48  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007475  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f2  00000000  00000000  0002750e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  00028c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  00029410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cf2  00000000  00000000  00029b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a229  00000000  00000000  00041852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ff8  00000000  00000000  0004ba7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfa73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000cfac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a9c 	.word	0x08002a9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a9c 	.word	0x08002a9c

0800014c <MPU_6050_Init>:

#include "MPU6050_interface.h"

extern I2C_HandleTypeDef hi2c1;

void MPU_6050_Init() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef retState = HAL_ERROR;
 8000152:	2301      	movs	r3, #1
 8000154:	71fb      	strb	r3, [r7, #7]
//  checking for device availability
	retState = HAL_I2C_IsDeviceReady(&hi2c1,
 8000156:	2364      	movs	r3, #100	; 0x64
 8000158:	2201      	movs	r2, #1
 800015a:	21d0      	movs	r1, #208	; 0xd0
 800015c:	483d      	ldr	r0, [pc, #244]	; (8000254 <MPU_6050_Init+0x108>)
 800015e:	f000 ffdd 	bl	800111c <HAL_I2C_IsDeviceReady>
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
			((MPU_I2C_ADDRESS << 1) + MPU_I2C_WRITE_OPERATION), 1,
			MPU_MAX_TIMEOUT_MS);
#if MPU_DEBUG_STATE == MPU_DEBUG_ENABLED
	if (retState == HAL_OK) {
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d103      	bne.n	8000174 <MPU_6050_Init+0x28>
		printf("Device is Ready to use\n");
 800016c:	483a      	ldr	r0, [pc, #232]	; (8000258 <MPU_6050_Init+0x10c>)
 800016e:	f002 f80d 	bl	800218c <puts>
 8000172:	e002      	b.n	800017a <MPU_6050_Init+0x2e>
	} else {
		printf("Device isn't Ready to use\n");
 8000174:	4839      	ldr	r0, [pc, #228]	; (800025c <MPU_6050_Init+0x110>)
 8000176:	f002 f809 	bl	800218c <puts>
	}
#else
#endif

//  Configure Gyroscope
	uint8_t l_gyroData = (MPU_FS_SEL_500 << MPU_FS_SEL_OFFSET);
 800017a:	2308      	movs	r3, #8
 800017c:	71bb      	strb	r3, [r7, #6]

	retState = HAL_I2C_Mem_Write(&hi2c1,
 800017e:	2364      	movs	r3, #100	; 0x64
 8000180:	9302      	str	r3, [sp, #8]
 8000182:	2301      	movs	r3, #1
 8000184:	9301      	str	r3, [sp, #4]
 8000186:	1dbb      	adds	r3, r7, #6
 8000188:	9300      	str	r3, [sp, #0]
 800018a:	2301      	movs	r3, #1
 800018c:	221b      	movs	r2, #27
 800018e:	21d0      	movs	r1, #208	; 0xd0
 8000190:	4830      	ldr	r0, [pc, #192]	; (8000254 <MPU_6050_Init+0x108>)
 8000192:	f000 fec9 	bl	8000f28 <HAL_I2C_Mem_Write>
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
			((MPU_I2C_ADDRESS << 1) + MPU_I2C_WRITE_OPERATION),
			MPU_GYROSCOPE_CFG_REG, 1, &l_gyroData, 1, MPU_MAX_TIMEOUT_MS);
#if MPU_DEBUG_STATE == MPU_DEBUG_ENABLED
	if (retState == HAL_OK) {
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d103      	bne.n	80001a8 <MPU_6050_Init+0x5c>
		printf("Configured GyroScope\n");
 80001a0:	482f      	ldr	r0, [pc, #188]	; (8000260 <MPU_6050_Init+0x114>)
 80001a2:	f001 fff3 	bl	800218c <puts>
 80001a6:	e002      	b.n	80001ae <MPU_6050_Init+0x62>
	} else {
		printf("GyroScope isn't Ready to use\n");
 80001a8:	482e      	ldr	r0, [pc, #184]	; (8000264 <MPU_6050_Init+0x118>)
 80001aa:	f001 ffef 	bl	800218c <puts>
	}
#else
#endif

//  Configure Accelerometer
	uint8_t l_accData = (MPU_AFS_SEL_4g << MPU_AFS_SEL_OFFSET);
 80001ae:	2308      	movs	r3, #8
 80001b0:	717b      	strb	r3, [r7, #5]

	retState = HAL_I2C_Mem_Write(&hi2c1,
 80001b2:	2364      	movs	r3, #100	; 0x64
 80001b4:	9302      	str	r3, [sp, #8]
 80001b6:	2301      	movs	r3, #1
 80001b8:	9301      	str	r3, [sp, #4]
 80001ba:	1d7b      	adds	r3, r7, #5
 80001bc:	9300      	str	r3, [sp, #0]
 80001be:	2301      	movs	r3, #1
 80001c0:	221c      	movs	r2, #28
 80001c2:	21d0      	movs	r1, #208	; 0xd0
 80001c4:	4823      	ldr	r0, [pc, #140]	; (8000254 <MPU_6050_Init+0x108>)
 80001c6:	f000 feaf 	bl	8000f28 <HAL_I2C_Mem_Write>
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
			((MPU_I2C_ADDRESS << 1) + MPU_I2C_WRITE_OPERATION),
			MPU_ACCELEROMETER_CFG_REG, 1, &l_accData, 1, MPU_MAX_TIMEOUT_MS);
#if MPU_DEBUG_STATE == MPU_DEBUG_ENABLED
	if (retState == HAL_OK) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d103      	bne.n	80001dc <MPU_6050_Init+0x90>
		printf("Configured Accelerometer\n");
 80001d4:	4824      	ldr	r0, [pc, #144]	; (8000268 <MPU_6050_Init+0x11c>)
 80001d6:	f001 ffd9 	bl	800218c <puts>
 80001da:	e002      	b.n	80001e2 <MPU_6050_Init+0x96>
	} else {
		printf("Accelerometer isn't Ready to use\n");
 80001dc:	4823      	ldr	r0, [pc, #140]	; (800026c <MPU_6050_Init+0x120>)
 80001de:	f001 ffd5 	bl	800218c <puts>
	}
#else
#endif

//  Configure POWER 8 MHz internal oscillator and Stop SleepMode
	uint8_t l_pwrData = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	713b      	strb	r3, [r7, #4]

	retState = HAL_I2C_Mem_Write(&hi2c1,
 80001e6:	2364      	movs	r3, #100	; 0x64
 80001e8:	9302      	str	r3, [sp, #8]
 80001ea:	2301      	movs	r3, #1
 80001ec:	9301      	str	r3, [sp, #4]
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2301      	movs	r3, #1
 80001f4:	226b      	movs	r2, #107	; 0x6b
 80001f6:	21d0      	movs	r1, #208	; 0xd0
 80001f8:	4816      	ldr	r0, [pc, #88]	; (8000254 <MPU_6050_Init+0x108>)
 80001fa:	f000 fe95 	bl	8000f28 <HAL_I2C_Mem_Write>
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
			((MPU_I2C_ADDRESS << 1) + MPU_I2C_WRITE_OPERATION),
			MPU_PWR_MANAGMENT_REG1, 1, &l_pwrData, 1, MPU_MAX_TIMEOUT_MS);
#if MPU_DEBUG_STATE == MPU_DEBUG_ENABLED
	if (retState == HAL_OK) {
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d103      	bne.n	8000210 <MPU_6050_Init+0xc4>
		printf("Device Running Mode\n");
 8000208:	4819      	ldr	r0, [pc, #100]	; (8000270 <MPU_6050_Init+0x124>)
 800020a:	f001 ffbf 	bl	800218c <puts>
 800020e:	e002      	b.n	8000216 <MPU_6050_Init+0xca>
	} else {
		printf("Device is in Sleep Mode\n");
 8000210:	4818      	ldr	r0, [pc, #96]	; (8000274 <MPU_6050_Init+0x128>)
 8000212:	f001 ffbb 	bl	800218c <puts>
#endif

	//  Configure digital Low-Pass Filter for Accelerometer/Gyroscope
	//  External SYNC off by default

	uint8_t l_cfgData = MPU_DLPF_ACCEL_1kHz_0Ms_GYRO_8kHz_1Ms;
 8000216:	2300      	movs	r3, #0
 8000218:	70fb      	strb	r3, [r7, #3]

	retState = HAL_I2C_Mem_Write(&hi2c1,
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	9302      	str	r3, [sp, #8]
 800021e:	2301      	movs	r3, #1
 8000220:	9301      	str	r3, [sp, #4]
 8000222:	1cfb      	adds	r3, r7, #3
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2301      	movs	r3, #1
 8000228:	2219      	movs	r2, #25
 800022a:	21d0      	movs	r1, #208	; 0xd0
 800022c:	4809      	ldr	r0, [pc, #36]	; (8000254 <MPU_6050_Init+0x108>)
 800022e:	f000 fe7b 	bl	8000f28 <HAL_I2C_Mem_Write>
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
			((MPU_I2C_ADDRESS << 1) + MPU_I2C_WRITE_OPERATION),
			MPU_DEVICE_CONFIG_REG, 1, &l_cfgData, 1, MPU_MAX_TIMEOUT_MS);
#if MPU_DEBUG_STATE == MPU_DEBUG_ENABLED
	if (retState == HAL_OK) {
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d103      	bne.n	8000244 <MPU_6050_Init+0xf8>
		printf("Device Running Mode\n");
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <MPU_6050_Init+0x124>)
 800023e:	f001 ffa5 	bl	800218c <puts>
	} else {
		printf("Device is in Sleep Mode\n");
	}
#else
#endif
}
 8000242:	e002      	b.n	800024a <MPU_6050_Init+0xfe>
		printf("Device is in Sleep Mode\n");
 8000244:	480b      	ldr	r0, [pc, #44]	; (8000274 <MPU_6050_Init+0x128>)
 8000246:	f001 ffa1 	bl	800218c <puts>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000094 	.word	0x20000094
 8000258:	08002ab4 	.word	0x08002ab4
 800025c:	08002acc 	.word	0x08002acc
 8000260:	08002ae8 	.word	0x08002ae8
 8000264:	08002b00 	.word	0x08002b00
 8000268:	08002b20 	.word	0x08002b20
 800026c:	08002b3c 	.word	0x08002b3c
 8000270:	08002b60 	.word	0x08002b60
 8000274:	08002b74 	.word	0x08002b74

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fa2a 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f809 	bl	8000296 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f88e 	bl	80003a4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000288:	f000 f84a 	bl	8000320 <MX_CRC_Init>
  MX_I2C1_Init();
 800028c:	f000 f85c 	bl	8000348 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU_6050_Init();
 8000290:	f7ff ff5c 	bl	800014c <MPU_6050_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x1c>

08000296 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b090      	sub	sp, #64	; 0x40
 800029a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	2228      	movs	r2, #40	; 0x28
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fefb 	bl	80020a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2302      	movs	r3, #2
 80002cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fab8 	bl	8001854 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ea:	f000 f87d 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2302      	movs	r3, #2
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2102      	movs	r1, #2
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fd25 	bl	8001d58 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000314:	f000 f868 	bl	80003e8 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3740      	adds	r7, #64	; 0x40
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_CRC_Init+0x20>)
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <MX_CRC_Init+0x24>)
 8000328:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_CRC_Init+0x20>)
 800032c:	f000 fb17 	bl	800095e <HAL_CRC_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000336:	f000 f857 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000008c 	.word	0x2000008c
 8000344:	40023000 	.word	0x40023000

08000348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C1_Init+0x50>)
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <MX_I2C1_Init+0x54>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C1_Init+0x50>)
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_I2C1_Init+0x58>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_I2C1_Init+0x50>)
 8000366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800036a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C1_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_I2C1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_I2C1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_I2C1_Init+0x50>)
 8000386:	f000 fc8b 	bl	8000ca0 <HAL_I2C_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f82a 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000094 	.word	0x20000094
 800039c:	40005400 	.word	0x40005400
 80003a0:	00061a80 	.word	0x00061a80

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_GPIO_Init+0x40>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <MX_GPIO_Init+0x40>)
 80003b0:	f043 0320 	orr.w	r3, r3, #32
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_GPIO_Init+0x40>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0320 	and.w	r3, r3, #32
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_GPIO_Init+0x40>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <MX_GPIO_Init+0x40>)
 80003c8:	f043 0308 	orr.w	r3, r3, #8
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <MX_GPIO_Init+0x40>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0308 	and.w	r3, r3, #8
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_MspInit+0x40>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <HAL_MspInit+0x40>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_MspInit+0x40>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <HAL_MspInit+0x40>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <HAL_MspInit+0x40>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_MspInit+0x40>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a09      	ldr	r2, [pc, #36]	; (800046c <HAL_CRC_MspInit+0x34>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d10b      	bne.n	8000462 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <HAL_CRC_MspInit+0x38>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <HAL_CRC_MspInit+0x38>)
 8000450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_CRC_MspInit+0x38>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40023000 	.word	0x40023000
 8000470:	40021000 	.word	0x40021000

08000474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <HAL_I2C_MspInit+0x70>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d123      	bne.n	80004dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <HAL_I2C_MspInit+0x74>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <HAL_I2C_MspInit+0x74>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <HAL_I2C_MspInit+0x74>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0308 	and.w	r3, r3, #8
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004ac:	23c0      	movs	r3, #192	; 0xc0
 80004ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b0:	2312      	movs	r3, #18
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <HAL_I2C_MspInit+0x78>)
 80004c0:	f000 fa6a 	bl	8000998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <HAL_I2C_MspInit+0x74>)
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <HAL_I2C_MspInit+0x74>)
 80004ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ce:	61d3      	str	r3, [r2, #28]
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_I2C_MspInit+0x74>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40005400 	.word	0x40005400
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000536:	f000 f913 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}

0800053e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e00a      	b.n	8000566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000550:	f3af 8000 	nop.w
 8000554:	4601      	mov	r1, r0
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	60ba      	str	r2, [r7, #8]
 800055c:	b2ca      	uxtb	r2, r1
 800055e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3301      	adds	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbf0      	blt.n	8000550 <_read+0x12>
  }

  return len;
 800056e:	687b      	ldr	r3, [r7, #4]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e009      	b.n	800059e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	60ba      	str	r2, [r7, #8]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dbf1      	blt.n	800058a <_write+0x12>
  }
  return len;
 80005a6:	687b      	ldr	r3, [r7, #4]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <_close>:

int _close(int file)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d6:	605a      	str	r2, [r3, #4]
  return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <_isatty>:

int _isatty(int file)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ec:	2301      	movs	r3, #1
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <_sbrk+0x5c>)
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_sbrk+0x60>)
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <_sbrk+0x64>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <_sbrk+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	429a      	cmp	r2, r3
 800063e:	d207      	bcs.n	8000650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000640:	f001 fd04 	bl	800204c <__errno>
 8000644:	4603      	mov	r3, r0
 8000646:	220c      	movs	r2, #12
 8000648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	e009      	b.n	8000664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <_sbrk+0x64>)
 8000660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20005000 	.word	0x20005000
 8000670:	00000400 	.word	0x00000400
 8000674:	200000e8 	.word	0x200000e8
 8000678:	20000100 	.word	0x20000100

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000688:	f7ff fff8 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800068e:	490c      	ldr	r1, [pc, #48]	; (80006c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a4:	4c09      	ldr	r4, [pc, #36]	; (80006cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b2:	f001 fcd1 	bl	8002058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fddf 	bl	8000278 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006c4:	08002cd8 	.word	0x08002cd8
  ldr r2, =_sbss
 80006c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006cc:	20000100 	.word	0x20000100

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_Init+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_Init+0x28>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f907 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ea:	200f      	movs	r0, #15
 80006ec:	f000 f808 	bl	8000700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f0:	f7ff fe80 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x54>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_InitTick+0x58>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	fbb3 f3f1 	udiv	r3, r3, r1
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f911 	bl	8000946 <HAL_SYSTICK_Config>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e00e      	b.n	800074c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d80a      	bhi.n	800074a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f000 f8e7 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_InitTick+0x5c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000000 	.word	0x20000000
 8000758:	20000008 	.word	0x20000008
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x1c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_IncTick+0x20>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <HAL_IncTick+0x20>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000008 	.word	0x20000008
 8000780:	200000ec 	.word	0x200000ec

08000784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <HAL_GetTick+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	200000ec 	.word	0x200000ec

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	; (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	; (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	; 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff90 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff49 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5e 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff90 	bl	8000850 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5f 	bl	80007fc <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d101      	bne.n	8000970 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e00e      	b.n	800098e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d105      	bne.n	8000986 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fd59 	bl	8000438 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2201      	movs	r2, #1
 800098a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	b480      	push	{r7}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e169      	b.n	8000c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009ac:	2201      	movs	r2, #1
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	4013      	ands	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	f040 8158 	bne.w	8000c7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a9a      	ldr	r2, [pc, #616]	; (8000c38 <HAL_GPIO_Init+0x2a0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d05e      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009d4:	4a98      	ldr	r2, [pc, #608]	; (8000c38 <HAL_GPIO_Init+0x2a0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d875      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009da:	4a98      	ldr	r2, [pc, #608]	; (8000c3c <HAL_GPIO_Init+0x2a4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d058      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009e0:	4a96      	ldr	r2, [pc, #600]	; (8000c3c <HAL_GPIO_Init+0x2a4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d86f      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009e6:	4a96      	ldr	r2, [pc, #600]	; (8000c40 <HAL_GPIO_Init+0x2a8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d052      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009ec:	4a94      	ldr	r2, [pc, #592]	; (8000c40 <HAL_GPIO_Init+0x2a8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d869      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009f2:	4a94      	ldr	r2, [pc, #592]	; (8000c44 <HAL_GPIO_Init+0x2ac>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d04c      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009f8:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_GPIO_Init+0x2ac>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d863      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009fe:	4a92      	ldr	r2, [pc, #584]	; (8000c48 <HAL_GPIO_Init+0x2b0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d046      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 8000a04:	4a90      	ldr	r2, [pc, #576]	; (8000c48 <HAL_GPIO_Init+0x2b0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d85d      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 8000a0a:	2b12      	cmp	r3, #18
 8000a0c:	d82a      	bhi.n	8000a64 <HAL_GPIO_Init+0xcc>
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d859      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 8000a12:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <HAL_GPIO_Init+0x80>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000a6d 	.word	0x08000a6d
 8000a20:	08000a7f 	.word	0x08000a7f
 8000a24:	08000ac1 	.word	0x08000ac1
 8000a28:	08000ac7 	.word	0x08000ac7
 8000a2c:	08000ac7 	.word	0x08000ac7
 8000a30:	08000ac7 	.word	0x08000ac7
 8000a34:	08000ac7 	.word	0x08000ac7
 8000a38:	08000ac7 	.word	0x08000ac7
 8000a3c:	08000ac7 	.word	0x08000ac7
 8000a40:	08000ac7 	.word	0x08000ac7
 8000a44:	08000ac7 	.word	0x08000ac7
 8000a48:	08000ac7 	.word	0x08000ac7
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000ac7 	.word	0x08000ac7
 8000a54:	08000ac7 	.word	0x08000ac7
 8000a58:	08000ac7 	.word	0x08000ac7
 8000a5c:	08000a75 	.word	0x08000a75
 8000a60:	08000a89 	.word	0x08000a89
 8000a64:	4a79      	ldr	r2, [pc, #484]	; (8000c4c <HAL_GPIO_Init+0x2b4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a6a:	e02c      	b.n	8000ac6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e029      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e024      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	3308      	adds	r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e01f      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	330c      	adds	r3, #12
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e01a      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e013      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d105      	bne.n	8000ab4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	611a      	str	r2, [r3, #16]
          break;
 8000ab2:	e009      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	615a      	str	r2, [r3, #20]
          break;
 8000abe:	e003      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e000      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          break;
 8000ac6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2bff      	cmp	r3, #255	; 0xff
 8000acc:	d801      	bhi.n	8000ad2 <HAL_GPIO_Init+0x13a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	e001      	b.n	8000ad6 <HAL_GPIO_Init+0x13e>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	2bff      	cmp	r3, #255	; 0xff
 8000adc:	d802      	bhi.n	8000ae4 <HAL_GPIO_Init+0x14c>
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	e002      	b.n	8000aea <HAL_GPIO_Init+0x152>
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	3b08      	subs	r3, #8
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	210f      	movs	r1, #15
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	401a      	ands	r2, r3
 8000afc:	6a39      	ldr	r1, [r7, #32]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	431a      	orrs	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 80b1 	beq.w	8000c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b18:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x2b8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a4c      	ldr	r2, [pc, #304]	; (8000c50 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <HAL_GPIO_Init+0x2b8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b30:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a40      	ldr	r2, [pc, #256]	; (8000c58 <HAL_GPIO_Init+0x2c0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d013      	beq.n	8000b84 <HAL_GPIO_Init+0x1ec>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <HAL_GPIO_Init+0x2c4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_Init+0x1e8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <HAL_GPIO_Init+0x2c8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x1e4>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_Init+0x1e0>
 8000b74:	2303      	movs	r3, #3
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b84:	2300      	movs	r3, #0
 8000b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b96:	492f      	ldr	r1, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	492c      	ldr	r1, [pc, #176]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4928      	ldr	r1, [pc, #160]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	4922      	ldr	r1, [pc, #136]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	491e      	ldr	r1, [pc, #120]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4918      	ldr	r1, [pc, #96]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4914      	ldr	r1, [pc, #80]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d021      	beq.n	8000c6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	490e      	ldr	r1, [pc, #56]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
 8000c34:	e021      	b.n	8000c7a <HAL_GPIO_Init+0x2e2>
 8000c36:	bf00      	nop
 8000c38:	10320000 	.word	0x10320000
 8000c3c:	10310000 	.word	0x10310000
 8000c40:	10220000 	.word	0x10220000
 8000c44:	10210000 	.word	0x10210000
 8000c48:	10120000 	.word	0x10120000
 8000c4c:	10110000 	.word	0x10110000
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	40011000 	.word	0x40011000
 8000c64:	40011400 	.word	0x40011400
 8000c68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_GPIO_Init+0x304>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4909      	ldr	r1, [pc, #36]	; (8000c9c <HAL_GPIO_Init+0x304>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f47f ae8e 	bne.w	80009ac <HAL_GPIO_Init+0x14>
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	372c      	adds	r7, #44	; 0x2c
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e12b      	b.n	8000f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d106      	bne.n	8000ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fbd4 	bl	8000474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2224      	movs	r2, #36	; 0x24
 8000cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d04:	f001 f970 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8000d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4a81      	ldr	r2, [pc, #516]	; (8000f14 <HAL_I2C_Init+0x274>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d807      	bhi.n	8000d24 <HAL_I2C_Init+0x84>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a80      	ldr	r2, [pc, #512]	; (8000f18 <HAL_I2C_Init+0x278>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	bf94      	ite	ls
 8000d1c:	2301      	movls	r3, #1
 8000d1e:	2300      	movhi	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	e006      	b.n	8000d32 <HAL_I2C_Init+0x92>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a7d      	ldr	r2, [pc, #500]	; (8000f1c <HAL_I2C_Init+0x27c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	bf94      	ite	ls
 8000d2c:	2301      	movls	r3, #1
 8000d2e:	2300      	movhi	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0e7      	b.n	8000f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4a78      	ldr	r2, [pc, #480]	; (8000f20 <HAL_I2C_Init+0x280>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a6a      	ldr	r2, [pc, #424]	; (8000f14 <HAL_I2C_Init+0x274>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d802      	bhi.n	8000d74 <HAL_I2C_Init+0xd4>
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3301      	adds	r3, #1
 8000d72:	e009      	b.n	8000d88 <HAL_I2C_Init+0xe8>
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	4a69      	ldr	r2, [pc, #420]	; (8000f24 <HAL_I2C_Init+0x284>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	099b      	lsrs	r3, r3, #6
 8000d86:	3301      	adds	r3, #1
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	495c      	ldr	r1, [pc, #368]	; (8000f14 <HAL_I2C_Init+0x274>)
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d819      	bhi.n	8000ddc <HAL_I2C_Init+0x13c>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	1e59      	subs	r1, r3, #1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000db6:	1c59      	adds	r1, r3, #1
 8000db8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000dbc:	400b      	ands	r3, r1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00a      	beq.n	8000dd8 <HAL_I2C_Init+0x138>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1e59      	subs	r1, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd6:	e051      	b.n	8000e7c <HAL_I2C_Init+0x1dc>
 8000dd8:	2304      	movs	r3, #4
 8000dda:	e04f      	b.n	8000e7c <HAL_I2C_Init+0x1dc>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d111      	bne.n	8000e08 <HAL_I2C_Init+0x168>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6859      	ldr	r1, [r3, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	440b      	add	r3, r1
 8000df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf0c      	ite	eq
 8000e00:	2301      	moveq	r3, #1
 8000e02:	2300      	movne	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	e012      	b.n	8000e2e <HAL_I2C_Init+0x18e>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1e58      	subs	r0, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6859      	ldr	r1, [r3, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	0099      	lsls	r1, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2C_Init+0x196>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e022      	b.n	8000e7c <HAL_I2C_Init+0x1dc>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10e      	bne.n	8000e5c <HAL_I2C_Init+0x1bc>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1e58      	subs	r0, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	440b      	add	r3, r1
 8000e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5a:	e00f      	b.n	8000e7c <HAL_I2C_Init+0x1dc>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e58      	subs	r0, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6859      	ldr	r1, [r3, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	0099      	lsls	r1, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	6809      	ldr	r1, [r1, #0]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69da      	ldr	r2, [r3, #28]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6911      	ldr	r1, [r2, #16]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68d2      	ldr	r2, [r2, #12]
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	000186a0 	.word	0x000186a0
 8000f18:	001e847f 	.word	0x001e847f
 8000f1c:	003d08ff 	.word	0x003d08ff
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	10624dd3 	.word	0x10624dd3

08000f28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4603      	mov	r3, r0
 8000f38:	817b      	strh	r3, [r7, #10]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	813b      	strh	r3, [r7, #8]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f42:	f7ff fc1f 	bl	8000784 <HAL_GetTick>
 8000f46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b20      	cmp	r3, #32
 8000f52:	f040 80d9 	bne.w	8001108 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2319      	movs	r3, #25
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	496d      	ldr	r1, [pc, #436]	; (8001114 <HAL_I2C_Mem_Write+0x1ec>)
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 fa9f 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e0cc      	b.n	800110a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <HAL_I2C_Mem_Write+0x56>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e0c5      	b.n	800110a <HAL_I2C_Mem_Write+0x1e2>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d007      	beq.n	8000fa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2221      	movs	r2, #33	; 0x21
 8000fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6a3a      	ldr	r2, [r7, #32]
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a4d      	ldr	r2, [pc, #308]	; (8001118 <HAL_I2C_Mem_Write+0x1f0>)
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fe6:	88f8      	ldrh	r0, [r7, #6]
 8000fe8:	893a      	ldrh	r2, [r7, #8]
 8000fea:	8979      	ldrh	r1, [r7, #10]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f9be 	bl	8001378 <I2C_RequestMemoryWrite>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d052      	beq.n	80010a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e081      	b.n	800110a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fb64 	bl	80016d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00d      	beq.n	8001032 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b04      	cmp	r3, #4
 800101c:	d107      	bne.n	800102e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800102c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e06b      	b.n	800110a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104c:	3b01      	subs	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001058:	b29b      	uxth	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	b29a      	uxth	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d11b      	bne.n	80010a8 <HAL_I2C_Mem_Write+0x180>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001074:	2b00      	cmp	r3, #0
 8001076:	d017      	beq.n	80010a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001092:	3b01      	subs	r3, #1
 8001094:	b29a      	uxth	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800109e:	b29b      	uxth	r3, r3
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1aa      	bne.n	8001006 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 fb57 	bl	8001768 <I2C_WaitOnBTFFlagUntilTimeout>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00d      	beq.n	80010dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d107      	bne.n	80010d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e016      	b.n	800110a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2220      	movs	r2, #32
 80010f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e000      	b.n	800110a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001108:	2302      	movs	r3, #2
  }
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	00100002 	.word	0x00100002
 8001118:	ffff0000 	.word	0xffff0000

0800111c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af02      	add	r7, sp, #8
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	460b      	mov	r3, r1
 800112a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fb2a 	bl	8000784 <HAL_GetTick>
 8001130:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b20      	cmp	r3, #32
 8001140:	f040 8111 	bne.w	8001366 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2319      	movs	r3, #25
 800114a:	2201      	movs	r2, #1
 800114c:	4988      	ldr	r1, [pc, #544]	; (8001370 <HAL_I2C_IsDeviceReady+0x254>)
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f9a8 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800115a:	2302      	movs	r3, #2
 800115c:	e104      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_I2C_IsDeviceReady+0x50>
 8001168:	2302      	movs	r3, #2
 800116a:	e0fd      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b01      	cmp	r3, #1
 8001180:	d007      	beq.n	8001192 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2224      	movs	r2, #36	; 0x24
 80011a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4a70      	ldr	r2, [pc, #448]	; (8001374 <HAL_I2C_IsDeviceReady+0x258>)
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f966 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00d      	beq.n	80011fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ec:	d103      	bne.n	80011f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e0b6      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011fa:	897b      	ldrh	r3, [r7, #10]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001208:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff fabb 	bl	8000784 <HAL_GetTick>
 800120e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b02      	cmp	r3, #2
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800123e:	e025      	b.n	800128c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001240:	f7ff faa0 	bl	8000784 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d302      	bcc.n	8001256 <HAL_I2C_IsDeviceReady+0x13a>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	22a0      	movs	r2, #160	; 0xa0
 800125a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b02      	cmp	r3, #2
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2ba0      	cmp	r3, #160	; 0xa0
 8001296:	d005      	beq.n	80012a4 <HAL_I2C_IsDeviceReady+0x188>
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_I2C_IsDeviceReady+0x188>
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0cd      	beq.n	8001240 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d129      	bne.n	800130e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2319      	movs	r3, #25
 80012e6:	2201      	movs	r2, #1
 80012e8:	4921      	ldr	r1, [pc, #132]	; (8001370 <HAL_I2C_IsDeviceReady+0x254>)
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f8da 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e036      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e02c      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800131c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001326:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2319      	movs	r3, #25
 800132e:	2201      	movs	r2, #1
 8001330:	490f      	ldr	r1, [pc, #60]	; (8001370 <HAL_I2C_IsDeviceReady+0x254>)
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f8b6 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e012      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3301      	adds	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	f4ff af32 	bcc.w	80011b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2220      	movs	r2, #32
 8001356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001366:	2302      	movs	r3, #2
  }
}
 8001368:	4618      	mov	r0, r3
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	00100002 	.word	0x00100002
 8001374:	ffff0000 	.word	0xffff0000

08001378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4603      	mov	r3, r0
 8001388:	817b      	strh	r3, [r7, #10]
 800138a:	460b      	mov	r3, r1
 800138c:	813b      	strh	r3, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f878 	bl	80014a4 <I2C_WaitOnFlagUntilTimeout>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00d      	beq.n	80013d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013c8:	d103      	bne.n	80013d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e05f      	b.n	8001496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013d6:	897b      	ldrh	r3, [r7, #10]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	6a3a      	ldr	r2, [r7, #32]
 80013ea:	492d      	ldr	r1, [pc, #180]	; (80014a0 <I2C_RequestMemoryWrite+0x128>)
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f8d3 	bl	8001598 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e04c      	b.n	8001496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001414:	6a39      	ldr	r1, [r7, #32]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 f95e 	bl	80016d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00d      	beq.n	800143e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b04      	cmp	r3, #4
 8001428:	d107      	bne.n	800143a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e02b      	b.n	8001496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001444:	893b      	ldrh	r3, [r7, #8]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	e021      	b.n	8001494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001450:	893b      	ldrh	r3, [r7, #8]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2da      	uxtb	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001460:	6a39      	ldr	r1, [r7, #32]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f938 	bl	80016d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2b04      	cmp	r3, #4
 8001474:	d107      	bne.n	8001486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e005      	b.n	8001496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800148a:	893b      	ldrh	r3, [r7, #8]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	00010002 	.word	0x00010002

080014a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014b4:	e048      	b.n	8001548 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d044      	beq.n	8001548 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014be:	f7ff f961 	bl	8000784 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d302      	bcc.n	80014d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d139      	bne.n	8001548 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	0c1b      	lsrs	r3, r3, #16
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10d      	bne.n	80014fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4013      	ands	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	e00c      	b.n	8001514 <I2C_WaitOnFlagUntilTimeout+0x70>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	43da      	mvns	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4013      	ands	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	429a      	cmp	r2, r3
 8001518:	d116      	bne.n	8001548 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2220      	movs	r2, #32
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f043 0220 	orr.w	r2, r3, #32
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e023      	b.n	8001590 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10d      	bne.n	800156e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	43da      	mvns	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4013      	ands	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	e00c      	b.n	8001588 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	43da      	mvns	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4013      	ands	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	429a      	cmp	r2, r3
 800158c:	d093      	beq.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015a6:	e071      	b.n	800168c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d123      	bne.n	8001600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f043 0204 	orr.w	r2, r3, #4
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e067      	b.n	80016d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001606:	d041      	beq.n	800168c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001608:	f7ff f8bc 	bl	8000784 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d302      	bcc.n	800161e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d136      	bne.n	800168c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10c      	bne.n	8001642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4013      	ands	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	e00b      	b.n	800165a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	43da      	mvns	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4013      	ands	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e021      	b.n	80016d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	0c1b      	lsrs	r3, r3, #16
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10c      	bne.n	80016b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	43da      	mvns	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4013      	ands	r3, r2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	e00b      	b.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4013      	ands	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f47f af6d 	bne.w	80015a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016e4:	e034      	b.n	8001750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f886 	bl	80017f8 <I2C_IsAcknowledgeFailed>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e034      	b.n	8001760 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d028      	beq.n	8001750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fe:	f7ff f841 	bl	8000784 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	d302      	bcc.n	8001714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11d      	bne.n	8001750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	2b80      	cmp	r3, #128	; 0x80
 8001720:	d016      	beq.n	8001750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f043 0220 	orr.w	r2, r3, #32
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e007      	b.n	8001760 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b80      	cmp	r3, #128	; 0x80
 800175c:	d1c3      	bne.n	80016e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001774:	e034      	b.n	80017e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f83e 	bl	80017f8 <I2C_IsAcknowledgeFailed>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e034      	b.n	80017f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d028      	beq.n	80017e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800178e:	f7fe fff9 	bl	8000784 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	d302      	bcc.n	80017a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d11d      	bne.n	80017e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d016      	beq.n	80017e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f043 0220 	orr.w	r2, r3, #32
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e007      	b.n	80017f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d1c3      	bne.n	8001776 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180e:	d11b      	bne.n	8001848 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001818:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e272      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8087 	beq.w	8001982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001874:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d00c      	beq.n	800189a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d112      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
 800188c:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d06c      	beq.n	8001980 <HAL_RCC_OscConfig+0x12c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d168      	bne.n	8001980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e24c      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x76>
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e02e      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x98>
 80018d2:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e01d      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0xbc>
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e00b      	b.n	8001928 <HAL_RCC_OscConfig+0xd4>
 8001910:	4b6b      	ldr	r3, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a67      	ldr	r2, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe ff28 	bl	8000784 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7fe ff24 	bl	8000784 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e200      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0xe4>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7fe ff14 	bl	8000784 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7fe ff10 	bl	8000784 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1ec      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x10c>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1c0      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4939      	ldr	r1, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7fe fec9 	bl	8000784 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7fe fec5 	bl	8000784 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1a1      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe fea8 	bl	8000784 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a38:	f7fe fea4 	bl	8000784 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e180      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03a      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7fe fe88 	bl	8000784 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7fe fe84 	bl	8000784 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e160      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 faba 	bl	8002010 <RCC_Delay>
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fe6e 	bl	8000784 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aaa:	e00f      	b.n	8001acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7fe fe6a 	bl	8000784 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d908      	bls.n	8001acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e146      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	42420000 	.word	0x42420000
 8001ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b92      	ldr	r3, [pc, #584]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e9      	bne.n	8001aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a6 	beq.w	8001c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b8b      	ldr	r3, [pc, #556]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b85      	ldr	r3, [pc, #532]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b82      	ldr	r3, [pc, #520]	; (8001d1c <HAL_RCC_OscConfig+0x4c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x4c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7e      	ldr	r2, [pc, #504]	; (8001d1c <HAL_RCC_OscConfig+0x4c8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7fe fe2b 	bl	8000784 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7fe fe27 	bl	8000784 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e103      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b75      	ldr	r3, [pc, #468]	; (8001d1c <HAL_RCC_OscConfig+0x4c8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x312>
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a6e      	ldr	r2, [pc, #440]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x334>
 8001b6e:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a69      	ldr	r2, [pc, #420]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a66      	ldr	r2, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x356>
 8001b90:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a5d      	ldr	r2, [pc, #372]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x36e>
 8001baa:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a5a      	ldr	r2, [pc, #360]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7fe fddb 	bl	8000784 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7fe fdd7 	bl	8000784 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0b1      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe fdc5 	bl	8000784 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7fe fdc1 	bl	8000784 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e09b      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8087 	beq.w	8001d4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d061      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d146      	bne.n	8001cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe fd95 	bl	8000784 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fd91 	bl	8000784 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e06d      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4921      	ldr	r1, [pc, #132]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a19      	ldr	r1, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	491b      	ldr	r1, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7fe fd65 	bl	8000784 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7fe fd61 	bl	8000784 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e03d      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46a>
 8001cdc:	e035      	b.n	8001d4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_RCC_OscConfig+0x4cc>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fd4e 	bl	8000784 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fd4a 	bl	8000784 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e026      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x498>
 8001d0a:	e01e      	b.n	8001d4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e019      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x500>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0d0      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4965      	ldr	r1, [pc, #404]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0b8      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	494d      	ldr	r1, [pc, #308]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d040      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d115      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07f      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e073      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e06b      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4936      	ldr	r1, [pc, #216]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fc9c 	bl	8000784 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7fe fc98 	bl	8000784 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e053      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d210      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4922      	ldr	r1, [pc, #136]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e032      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4916      	ldr	r1, [pc, #88]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	490e      	ldr	r1, [pc, #56]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee6:	f000 f821 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	490a      	ldr	r1, [pc, #40]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef8:	5ccb      	ldrb	r3, [r1, r3]
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1cc>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fbfa 	bl	8000700 <HAL_InitTick>

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08002c40 	.word	0x08002c40
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d002      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x30>
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5a:	e027      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	e027      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	0c9b      	lsrs	r3, r3, #18
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d010      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c5b      	lsrs	r3, r3, #17
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	fb03 f202 	mul.w	r2, r3, r2
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e004      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fae:	613b      	str	r3, [r7, #16]
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	693b      	ldr	r3, [r7, #16]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	007a1200 	.word	0x007a1200
 8001fc8:	08002c58 	.word	0x08002c58
 8001fcc:	08002c68 	.word	0x08002c68
 8001fd0:	003d0900 	.word	0x003d0900

08001fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff2 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	08002c50 	.word	0x08002c50

08002010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <RCC_Delay+0x34>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <RCC_Delay+0x38>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a5b      	lsrs	r3, r3, #9
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800202c:	bf00      	nop
  }
  while (Delay --);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	60fa      	str	r2, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <RCC_Delay+0x1c>
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000000 	.word	0x20000000
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <__errno>:
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <__errno+0x8>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c

08002058 <__libc_init_array>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	2600      	movs	r6, #0
 800205c:	4d0c      	ldr	r5, [pc, #48]	; (8002090 <__libc_init_array+0x38>)
 800205e:	4c0d      	ldr	r4, [pc, #52]	; (8002094 <__libc_init_array+0x3c>)
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	42a6      	cmp	r6, r4
 8002066:	d109      	bne.n	800207c <__libc_init_array+0x24>
 8002068:	f000 fd18 	bl	8002a9c <_init>
 800206c:	2600      	movs	r6, #0
 800206e:	4d0a      	ldr	r5, [pc, #40]	; (8002098 <__libc_init_array+0x40>)
 8002070:	4c0a      	ldr	r4, [pc, #40]	; (800209c <__libc_init_array+0x44>)
 8002072:	1b64      	subs	r4, r4, r5
 8002074:	10a4      	asrs	r4, r4, #2
 8002076:	42a6      	cmp	r6, r4
 8002078:	d105      	bne.n	8002086 <__libc_init_array+0x2e>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002080:	4798      	blx	r3
 8002082:	3601      	adds	r6, #1
 8002084:	e7ee      	b.n	8002064 <__libc_init_array+0xc>
 8002086:	f855 3b04 	ldr.w	r3, [r5], #4
 800208a:	4798      	blx	r3
 800208c:	3601      	adds	r6, #1
 800208e:	e7f2      	b.n	8002076 <__libc_init_array+0x1e>
 8002090:	08002cd0 	.word	0x08002cd0
 8002094:	08002cd0 	.word	0x08002cd0
 8002098:	08002cd0 	.word	0x08002cd0
 800209c:	08002cd4 	.word	0x08002cd4

080020a0 <memset>:
 80020a0:	4603      	mov	r3, r0
 80020a2:	4402      	add	r2, r0
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d100      	bne.n	80020aa <memset+0xa>
 80020a8:	4770      	bx	lr
 80020aa:	f803 1b01 	strb.w	r1, [r3], #1
 80020ae:	e7f9      	b.n	80020a4 <memset+0x4>

080020b0 <_puts_r>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	460e      	mov	r6, r1
 80020b4:	4605      	mov	r5, r0
 80020b6:	b118      	cbz	r0, 80020c0 <_puts_r+0x10>
 80020b8:	6983      	ldr	r3, [r0, #24]
 80020ba:	b90b      	cbnz	r3, 80020c0 <_puts_r+0x10>
 80020bc:	f000 fa44 	bl	8002548 <__sinit>
 80020c0:	69ab      	ldr	r3, [r5, #24]
 80020c2:	68ac      	ldr	r4, [r5, #8]
 80020c4:	b913      	cbnz	r3, 80020cc <_puts_r+0x1c>
 80020c6:	4628      	mov	r0, r5
 80020c8:	f000 fa3e 	bl	8002548 <__sinit>
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <_puts_r+0xd0>)
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d120      	bne.n	8002114 <_puts_r+0x64>
 80020d2:	686c      	ldr	r4, [r5, #4]
 80020d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020d6:	07db      	lsls	r3, r3, #31
 80020d8:	d405      	bmi.n	80020e6 <_puts_r+0x36>
 80020da:	89a3      	ldrh	r3, [r4, #12]
 80020dc:	0598      	lsls	r0, r3, #22
 80020de:	d402      	bmi.n	80020e6 <_puts_r+0x36>
 80020e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020e2:	f000 facf 	bl	8002684 <__retarget_lock_acquire_recursive>
 80020e6:	89a3      	ldrh	r3, [r4, #12]
 80020e8:	0719      	lsls	r1, r3, #28
 80020ea:	d51d      	bpl.n	8002128 <_puts_r+0x78>
 80020ec:	6923      	ldr	r3, [r4, #16]
 80020ee:	b1db      	cbz	r3, 8002128 <_puts_r+0x78>
 80020f0:	3e01      	subs	r6, #1
 80020f2:	68a3      	ldr	r3, [r4, #8]
 80020f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60a3      	str	r3, [r4, #8]
 80020fc:	bb39      	cbnz	r1, 800214e <_puts_r+0x9e>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da38      	bge.n	8002174 <_puts_r+0xc4>
 8002102:	4622      	mov	r2, r4
 8002104:	210a      	movs	r1, #10
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f848 	bl	800219c <__swbuf_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d011      	beq.n	8002134 <_puts_r+0x84>
 8002110:	250a      	movs	r5, #10
 8002112:	e011      	b.n	8002138 <_puts_r+0x88>
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <_puts_r+0xd4>)
 8002116:	429c      	cmp	r4, r3
 8002118:	d101      	bne.n	800211e <_puts_r+0x6e>
 800211a:	68ac      	ldr	r4, [r5, #8]
 800211c:	e7da      	b.n	80020d4 <_puts_r+0x24>
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <_puts_r+0xd8>)
 8002120:	429c      	cmp	r4, r3
 8002122:	bf08      	it	eq
 8002124:	68ec      	ldreq	r4, [r5, #12]
 8002126:	e7d5      	b.n	80020d4 <_puts_r+0x24>
 8002128:	4621      	mov	r1, r4
 800212a:	4628      	mov	r0, r5
 800212c:	f000 f888 	bl	8002240 <__swsetup_r>
 8002130:	2800      	cmp	r0, #0
 8002132:	d0dd      	beq.n	80020f0 <_puts_r+0x40>
 8002134:	f04f 35ff 	mov.w	r5, #4294967295
 8002138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800213a:	07da      	lsls	r2, r3, #31
 800213c:	d405      	bmi.n	800214a <_puts_r+0x9a>
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	059b      	lsls	r3, r3, #22
 8002142:	d402      	bmi.n	800214a <_puts_r+0x9a>
 8002144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002146:	f000 fa9e 	bl	8002686 <__retarget_lock_release_recursive>
 800214a:	4628      	mov	r0, r5
 800214c:	bd70      	pop	{r4, r5, r6, pc}
 800214e:	2b00      	cmp	r3, #0
 8002150:	da04      	bge.n	800215c <_puts_r+0xac>
 8002152:	69a2      	ldr	r2, [r4, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	dc06      	bgt.n	8002166 <_puts_r+0xb6>
 8002158:	290a      	cmp	r1, #10
 800215a:	d004      	beq.n	8002166 <_puts_r+0xb6>
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	6022      	str	r2, [r4, #0]
 8002162:	7019      	strb	r1, [r3, #0]
 8002164:	e7c5      	b.n	80020f2 <_puts_r+0x42>
 8002166:	4622      	mov	r2, r4
 8002168:	4628      	mov	r0, r5
 800216a:	f000 f817 	bl	800219c <__swbuf_r>
 800216e:	3001      	adds	r0, #1
 8002170:	d1bf      	bne.n	80020f2 <_puts_r+0x42>
 8002172:	e7df      	b.n	8002134 <_puts_r+0x84>
 8002174:	250a      	movs	r5, #10
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	6022      	str	r2, [r4, #0]
 800217c:	701d      	strb	r5, [r3, #0]
 800217e:	e7db      	b.n	8002138 <_puts_r+0x88>
 8002180:	08002c90 	.word	0x08002c90
 8002184:	08002cb0 	.word	0x08002cb0
 8002188:	08002c70 	.word	0x08002c70

0800218c <puts>:
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <puts+0xc>)
 800218e:	4601      	mov	r1, r0
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	f7ff bf8d 	b.w	80020b0 <_puts_r>
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c

0800219c <__swbuf_r>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	460e      	mov	r6, r1
 80021a0:	4614      	mov	r4, r2
 80021a2:	4605      	mov	r5, r0
 80021a4:	b118      	cbz	r0, 80021ae <__swbuf_r+0x12>
 80021a6:	6983      	ldr	r3, [r0, #24]
 80021a8:	b90b      	cbnz	r3, 80021ae <__swbuf_r+0x12>
 80021aa:	f000 f9cd 	bl	8002548 <__sinit>
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <__swbuf_r+0x98>)
 80021b0:	429c      	cmp	r4, r3
 80021b2:	d12b      	bne.n	800220c <__swbuf_r+0x70>
 80021b4:	686c      	ldr	r4, [r5, #4]
 80021b6:	69a3      	ldr	r3, [r4, #24]
 80021b8:	60a3      	str	r3, [r4, #8]
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	071a      	lsls	r2, r3, #28
 80021be:	d52f      	bpl.n	8002220 <__swbuf_r+0x84>
 80021c0:	6923      	ldr	r3, [r4, #16]
 80021c2:	b36b      	cbz	r3, 8002220 <__swbuf_r+0x84>
 80021c4:	6923      	ldr	r3, [r4, #16]
 80021c6:	6820      	ldr	r0, [r4, #0]
 80021c8:	b2f6      	uxtb	r6, r6
 80021ca:	1ac0      	subs	r0, r0, r3
 80021cc:	6963      	ldr	r3, [r4, #20]
 80021ce:	4637      	mov	r7, r6
 80021d0:	4283      	cmp	r3, r0
 80021d2:	dc04      	bgt.n	80021de <__swbuf_r+0x42>
 80021d4:	4621      	mov	r1, r4
 80021d6:	4628      	mov	r0, r5
 80021d8:	f000 f922 	bl	8002420 <_fflush_r>
 80021dc:	bb30      	cbnz	r0, 800222c <__swbuf_r+0x90>
 80021de:	68a3      	ldr	r3, [r4, #8]
 80021e0:	3001      	adds	r0, #1
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60a3      	str	r3, [r4, #8]
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	6022      	str	r2, [r4, #0]
 80021ec:	701e      	strb	r6, [r3, #0]
 80021ee:	6963      	ldr	r3, [r4, #20]
 80021f0:	4283      	cmp	r3, r0
 80021f2:	d004      	beq.n	80021fe <__swbuf_r+0x62>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	07db      	lsls	r3, r3, #31
 80021f8:	d506      	bpl.n	8002208 <__swbuf_r+0x6c>
 80021fa:	2e0a      	cmp	r6, #10
 80021fc:	d104      	bne.n	8002208 <__swbuf_r+0x6c>
 80021fe:	4621      	mov	r1, r4
 8002200:	4628      	mov	r0, r5
 8002202:	f000 f90d 	bl	8002420 <_fflush_r>
 8002206:	b988      	cbnz	r0, 800222c <__swbuf_r+0x90>
 8002208:	4638      	mov	r0, r7
 800220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <__swbuf_r+0x9c>)
 800220e:	429c      	cmp	r4, r3
 8002210:	d101      	bne.n	8002216 <__swbuf_r+0x7a>
 8002212:	68ac      	ldr	r4, [r5, #8]
 8002214:	e7cf      	b.n	80021b6 <__swbuf_r+0x1a>
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <__swbuf_r+0xa0>)
 8002218:	429c      	cmp	r4, r3
 800221a:	bf08      	it	eq
 800221c:	68ec      	ldreq	r4, [r5, #12]
 800221e:	e7ca      	b.n	80021b6 <__swbuf_r+0x1a>
 8002220:	4621      	mov	r1, r4
 8002222:	4628      	mov	r0, r5
 8002224:	f000 f80c 	bl	8002240 <__swsetup_r>
 8002228:	2800      	cmp	r0, #0
 800222a:	d0cb      	beq.n	80021c4 <__swbuf_r+0x28>
 800222c:	f04f 37ff 	mov.w	r7, #4294967295
 8002230:	e7ea      	b.n	8002208 <__swbuf_r+0x6c>
 8002232:	bf00      	nop
 8002234:	08002c90 	.word	0x08002c90
 8002238:	08002cb0 	.word	0x08002cb0
 800223c:	08002c70 	.word	0x08002c70

08002240 <__swsetup_r>:
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <__swsetup_r+0xcc>)
 8002242:	b570      	push	{r4, r5, r6, lr}
 8002244:	681d      	ldr	r5, [r3, #0]
 8002246:	4606      	mov	r6, r0
 8002248:	460c      	mov	r4, r1
 800224a:	b125      	cbz	r5, 8002256 <__swsetup_r+0x16>
 800224c:	69ab      	ldr	r3, [r5, #24]
 800224e:	b913      	cbnz	r3, 8002256 <__swsetup_r+0x16>
 8002250:	4628      	mov	r0, r5
 8002252:	f000 f979 	bl	8002548 <__sinit>
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <__swsetup_r+0xd0>)
 8002258:	429c      	cmp	r4, r3
 800225a:	d10f      	bne.n	800227c <__swsetup_r+0x3c>
 800225c:	686c      	ldr	r4, [r5, #4]
 800225e:	89a3      	ldrh	r3, [r4, #12]
 8002260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002264:	0719      	lsls	r1, r3, #28
 8002266:	d42c      	bmi.n	80022c2 <__swsetup_r+0x82>
 8002268:	06dd      	lsls	r5, r3, #27
 800226a:	d411      	bmi.n	8002290 <__swsetup_r+0x50>
 800226c:	2309      	movs	r3, #9
 800226e:	6033      	str	r3, [r6, #0]
 8002270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	e03e      	b.n	80022fa <__swsetup_r+0xba>
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <__swsetup_r+0xd4>)
 800227e:	429c      	cmp	r4, r3
 8002280:	d101      	bne.n	8002286 <__swsetup_r+0x46>
 8002282:	68ac      	ldr	r4, [r5, #8]
 8002284:	e7eb      	b.n	800225e <__swsetup_r+0x1e>
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <__swsetup_r+0xd8>)
 8002288:	429c      	cmp	r4, r3
 800228a:	bf08      	it	eq
 800228c:	68ec      	ldreq	r4, [r5, #12]
 800228e:	e7e6      	b.n	800225e <__swsetup_r+0x1e>
 8002290:	0758      	lsls	r0, r3, #29
 8002292:	d512      	bpl.n	80022ba <__swsetup_r+0x7a>
 8002294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002296:	b141      	cbz	r1, 80022aa <__swsetup_r+0x6a>
 8002298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800229c:	4299      	cmp	r1, r3
 800229e:	d002      	beq.n	80022a6 <__swsetup_r+0x66>
 80022a0:	4630      	mov	r0, r6
 80022a2:	f000 fa57 	bl	8002754 <_free_r>
 80022a6:	2300      	movs	r3, #0
 80022a8:	6363      	str	r3, [r4, #52]	; 0x34
 80022aa:	89a3      	ldrh	r3, [r4, #12]
 80022ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022b0:	81a3      	strh	r3, [r4, #12]
 80022b2:	2300      	movs	r3, #0
 80022b4:	6063      	str	r3, [r4, #4]
 80022b6:	6923      	ldr	r3, [r4, #16]
 80022b8:	6023      	str	r3, [r4, #0]
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	81a3      	strh	r3, [r4, #12]
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	b94b      	cbnz	r3, 80022da <__swsetup_r+0x9a>
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d0:	d003      	beq.n	80022da <__swsetup_r+0x9a>
 80022d2:	4621      	mov	r1, r4
 80022d4:	4630      	mov	r0, r6
 80022d6:	f000 f9fd 	bl	80026d4 <__smakebuf_r>
 80022da:	89a0      	ldrh	r0, [r4, #12]
 80022dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022e0:	f010 0301 	ands.w	r3, r0, #1
 80022e4:	d00a      	beq.n	80022fc <__swsetup_r+0xbc>
 80022e6:	2300      	movs	r3, #0
 80022e8:	60a3      	str	r3, [r4, #8]
 80022ea:	6963      	ldr	r3, [r4, #20]
 80022ec:	425b      	negs	r3, r3
 80022ee:	61a3      	str	r3, [r4, #24]
 80022f0:	6923      	ldr	r3, [r4, #16]
 80022f2:	b943      	cbnz	r3, 8002306 <__swsetup_r+0xc6>
 80022f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022f8:	d1ba      	bne.n	8002270 <__swsetup_r+0x30>
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
 80022fc:	0781      	lsls	r1, r0, #30
 80022fe:	bf58      	it	pl
 8002300:	6963      	ldrpl	r3, [r4, #20]
 8002302:	60a3      	str	r3, [r4, #8]
 8002304:	e7f4      	b.n	80022f0 <__swsetup_r+0xb0>
 8002306:	2000      	movs	r0, #0
 8002308:	e7f7      	b.n	80022fa <__swsetup_r+0xba>
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c
 8002310:	08002c90 	.word	0x08002c90
 8002314:	08002cb0 	.word	0x08002cb0
 8002318:	08002c70 	.word	0x08002c70

0800231c <__sflush_r>:
 800231c:	898a      	ldrh	r2, [r1, #12]
 800231e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002320:	4605      	mov	r5, r0
 8002322:	0710      	lsls	r0, r2, #28
 8002324:	460c      	mov	r4, r1
 8002326:	d457      	bmi.n	80023d8 <__sflush_r+0xbc>
 8002328:	684b      	ldr	r3, [r1, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	dc04      	bgt.n	8002338 <__sflush_r+0x1c>
 800232e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	dc01      	bgt.n	8002338 <__sflush_r+0x1c>
 8002334:	2000      	movs	r0, #0
 8002336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800233a:	2e00      	cmp	r6, #0
 800233c:	d0fa      	beq.n	8002334 <__sflush_r+0x18>
 800233e:	2300      	movs	r3, #0
 8002340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002344:	682f      	ldr	r7, [r5, #0]
 8002346:	602b      	str	r3, [r5, #0]
 8002348:	d032      	beq.n	80023b0 <__sflush_r+0x94>
 800234a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800234c:	89a3      	ldrh	r3, [r4, #12]
 800234e:	075a      	lsls	r2, r3, #29
 8002350:	d505      	bpl.n	800235e <__sflush_r+0x42>
 8002352:	6863      	ldr	r3, [r4, #4]
 8002354:	1ac0      	subs	r0, r0, r3
 8002356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002358:	b10b      	cbz	r3, 800235e <__sflush_r+0x42>
 800235a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	2300      	movs	r3, #0
 8002360:	4602      	mov	r2, r0
 8002362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002364:	4628      	mov	r0, r5
 8002366:	6a21      	ldr	r1, [r4, #32]
 8002368:	47b0      	blx	r6
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	89a3      	ldrh	r3, [r4, #12]
 800236e:	d106      	bne.n	800237e <__sflush_r+0x62>
 8002370:	6829      	ldr	r1, [r5, #0]
 8002372:	291d      	cmp	r1, #29
 8002374:	d82c      	bhi.n	80023d0 <__sflush_r+0xb4>
 8002376:	4a29      	ldr	r2, [pc, #164]	; (800241c <__sflush_r+0x100>)
 8002378:	40ca      	lsrs	r2, r1
 800237a:	07d6      	lsls	r6, r2, #31
 800237c:	d528      	bpl.n	80023d0 <__sflush_r+0xb4>
 800237e:	2200      	movs	r2, #0
 8002380:	6062      	str	r2, [r4, #4]
 8002382:	6922      	ldr	r2, [r4, #16]
 8002384:	04d9      	lsls	r1, r3, #19
 8002386:	6022      	str	r2, [r4, #0]
 8002388:	d504      	bpl.n	8002394 <__sflush_r+0x78>
 800238a:	1c42      	adds	r2, r0, #1
 800238c:	d101      	bne.n	8002392 <__sflush_r+0x76>
 800238e:	682b      	ldr	r3, [r5, #0]
 8002390:	b903      	cbnz	r3, 8002394 <__sflush_r+0x78>
 8002392:	6560      	str	r0, [r4, #84]	; 0x54
 8002394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002396:	602f      	str	r7, [r5, #0]
 8002398:	2900      	cmp	r1, #0
 800239a:	d0cb      	beq.n	8002334 <__sflush_r+0x18>
 800239c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023a0:	4299      	cmp	r1, r3
 80023a2:	d002      	beq.n	80023aa <__sflush_r+0x8e>
 80023a4:	4628      	mov	r0, r5
 80023a6:	f000 f9d5 	bl	8002754 <_free_r>
 80023aa:	2000      	movs	r0, #0
 80023ac:	6360      	str	r0, [r4, #52]	; 0x34
 80023ae:	e7c2      	b.n	8002336 <__sflush_r+0x1a>
 80023b0:	6a21      	ldr	r1, [r4, #32]
 80023b2:	2301      	movs	r3, #1
 80023b4:	4628      	mov	r0, r5
 80023b6:	47b0      	blx	r6
 80023b8:	1c41      	adds	r1, r0, #1
 80023ba:	d1c7      	bne.n	800234c <__sflush_r+0x30>
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0c4      	beq.n	800234c <__sflush_r+0x30>
 80023c2:	2b1d      	cmp	r3, #29
 80023c4:	d001      	beq.n	80023ca <__sflush_r+0xae>
 80023c6:	2b16      	cmp	r3, #22
 80023c8:	d101      	bne.n	80023ce <__sflush_r+0xb2>
 80023ca:	602f      	str	r7, [r5, #0]
 80023cc:	e7b2      	b.n	8002334 <__sflush_r+0x18>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d4:	81a3      	strh	r3, [r4, #12]
 80023d6:	e7ae      	b.n	8002336 <__sflush_r+0x1a>
 80023d8:	690f      	ldr	r7, [r1, #16]
 80023da:	2f00      	cmp	r7, #0
 80023dc:	d0aa      	beq.n	8002334 <__sflush_r+0x18>
 80023de:	0793      	lsls	r3, r2, #30
 80023e0:	bf18      	it	ne
 80023e2:	2300      	movne	r3, #0
 80023e4:	680e      	ldr	r6, [r1, #0]
 80023e6:	bf08      	it	eq
 80023e8:	694b      	ldreq	r3, [r1, #20]
 80023ea:	1bf6      	subs	r6, r6, r7
 80023ec:	600f      	str	r7, [r1, #0]
 80023ee:	608b      	str	r3, [r1, #8]
 80023f0:	2e00      	cmp	r6, #0
 80023f2:	dd9f      	ble.n	8002334 <__sflush_r+0x18>
 80023f4:	4633      	mov	r3, r6
 80023f6:	463a      	mov	r2, r7
 80023f8:	4628      	mov	r0, r5
 80023fa:	6a21      	ldr	r1, [r4, #32]
 80023fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002400:	47e0      	blx	ip
 8002402:	2800      	cmp	r0, #0
 8002404:	dc06      	bgt.n	8002414 <__sflush_r+0xf8>
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002410:	81a3      	strh	r3, [r4, #12]
 8002412:	e790      	b.n	8002336 <__sflush_r+0x1a>
 8002414:	4407      	add	r7, r0
 8002416:	1a36      	subs	r6, r6, r0
 8002418:	e7ea      	b.n	80023f0 <__sflush_r+0xd4>
 800241a:	bf00      	nop
 800241c:	20400001 	.word	0x20400001

08002420 <_fflush_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	690b      	ldr	r3, [r1, #16]
 8002424:	4605      	mov	r5, r0
 8002426:	460c      	mov	r4, r1
 8002428:	b913      	cbnz	r3, 8002430 <_fflush_r+0x10>
 800242a:	2500      	movs	r5, #0
 800242c:	4628      	mov	r0, r5
 800242e:	bd38      	pop	{r3, r4, r5, pc}
 8002430:	b118      	cbz	r0, 800243a <_fflush_r+0x1a>
 8002432:	6983      	ldr	r3, [r0, #24]
 8002434:	b90b      	cbnz	r3, 800243a <_fflush_r+0x1a>
 8002436:	f000 f887 	bl	8002548 <__sinit>
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <_fflush_r+0x6c>)
 800243c:	429c      	cmp	r4, r3
 800243e:	d11b      	bne.n	8002478 <_fflush_r+0x58>
 8002440:	686c      	ldr	r4, [r5, #4]
 8002442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0ef      	beq.n	800242a <_fflush_r+0xa>
 800244a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800244c:	07d0      	lsls	r0, r2, #31
 800244e:	d404      	bmi.n	800245a <_fflush_r+0x3a>
 8002450:	0599      	lsls	r1, r3, #22
 8002452:	d402      	bmi.n	800245a <_fflush_r+0x3a>
 8002454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002456:	f000 f915 	bl	8002684 <__retarget_lock_acquire_recursive>
 800245a:	4628      	mov	r0, r5
 800245c:	4621      	mov	r1, r4
 800245e:	f7ff ff5d 	bl	800231c <__sflush_r>
 8002462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002464:	4605      	mov	r5, r0
 8002466:	07da      	lsls	r2, r3, #31
 8002468:	d4e0      	bmi.n	800242c <_fflush_r+0xc>
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	059b      	lsls	r3, r3, #22
 800246e:	d4dd      	bmi.n	800242c <_fflush_r+0xc>
 8002470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002472:	f000 f908 	bl	8002686 <__retarget_lock_release_recursive>
 8002476:	e7d9      	b.n	800242c <_fflush_r+0xc>
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <_fflush_r+0x70>)
 800247a:	429c      	cmp	r4, r3
 800247c:	d101      	bne.n	8002482 <_fflush_r+0x62>
 800247e:	68ac      	ldr	r4, [r5, #8]
 8002480:	e7df      	b.n	8002442 <_fflush_r+0x22>
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <_fflush_r+0x74>)
 8002484:	429c      	cmp	r4, r3
 8002486:	bf08      	it	eq
 8002488:	68ec      	ldreq	r4, [r5, #12]
 800248a:	e7da      	b.n	8002442 <_fflush_r+0x22>
 800248c:	08002c90 	.word	0x08002c90
 8002490:	08002cb0 	.word	0x08002cb0
 8002494:	08002c70 	.word	0x08002c70

08002498 <std>:
 8002498:	2300      	movs	r3, #0
 800249a:	b510      	push	{r4, lr}
 800249c:	4604      	mov	r4, r0
 800249e:	e9c0 3300 	strd	r3, r3, [r0]
 80024a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024a6:	6083      	str	r3, [r0, #8]
 80024a8:	8181      	strh	r1, [r0, #12]
 80024aa:	6643      	str	r3, [r0, #100]	; 0x64
 80024ac:	81c2      	strh	r2, [r0, #14]
 80024ae:	6183      	str	r3, [r0, #24]
 80024b0:	4619      	mov	r1, r3
 80024b2:	2208      	movs	r2, #8
 80024b4:	305c      	adds	r0, #92	; 0x5c
 80024b6:	f7ff fdf3 	bl	80020a0 <memset>
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <std+0x38>)
 80024bc:	6224      	str	r4, [r4, #32]
 80024be:	6263      	str	r3, [r4, #36]	; 0x24
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <std+0x3c>)
 80024c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <std+0x40>)
 80024c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <std+0x44>)
 80024ca:	6323      	str	r3, [r4, #48]	; 0x30
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	bf00      	nop
 80024d0:	0800292d 	.word	0x0800292d
 80024d4:	0800294f 	.word	0x0800294f
 80024d8:	08002987 	.word	0x08002987
 80024dc:	080029ab 	.word	0x080029ab

080024e0 <_cleanup_r>:
 80024e0:	4901      	ldr	r1, [pc, #4]	; (80024e8 <_cleanup_r+0x8>)
 80024e2:	f000 b8af 	b.w	8002644 <_fwalk_reent>
 80024e6:	bf00      	nop
 80024e8:	08002421 	.word	0x08002421

080024ec <__sfmoreglue>:
 80024ec:	2268      	movs	r2, #104	; 0x68
 80024ee:	b570      	push	{r4, r5, r6, lr}
 80024f0:	1e4d      	subs	r5, r1, #1
 80024f2:	4355      	muls	r5, r2
 80024f4:	460e      	mov	r6, r1
 80024f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80024fa:	f000 f993 	bl	8002824 <_malloc_r>
 80024fe:	4604      	mov	r4, r0
 8002500:	b140      	cbz	r0, 8002514 <__sfmoreglue+0x28>
 8002502:	2100      	movs	r1, #0
 8002504:	e9c0 1600 	strd	r1, r6, [r0]
 8002508:	300c      	adds	r0, #12
 800250a:	60a0      	str	r0, [r4, #8]
 800250c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002510:	f7ff fdc6 	bl	80020a0 <memset>
 8002514:	4620      	mov	r0, r4
 8002516:	bd70      	pop	{r4, r5, r6, pc}

08002518 <__sfp_lock_acquire>:
 8002518:	4801      	ldr	r0, [pc, #4]	; (8002520 <__sfp_lock_acquire+0x8>)
 800251a:	f000 b8b3 	b.w	8002684 <__retarget_lock_acquire_recursive>
 800251e:	bf00      	nop
 8002520:	200000f1 	.word	0x200000f1

08002524 <__sfp_lock_release>:
 8002524:	4801      	ldr	r0, [pc, #4]	; (800252c <__sfp_lock_release+0x8>)
 8002526:	f000 b8ae 	b.w	8002686 <__retarget_lock_release_recursive>
 800252a:	bf00      	nop
 800252c:	200000f1 	.word	0x200000f1

08002530 <__sinit_lock_acquire>:
 8002530:	4801      	ldr	r0, [pc, #4]	; (8002538 <__sinit_lock_acquire+0x8>)
 8002532:	f000 b8a7 	b.w	8002684 <__retarget_lock_acquire_recursive>
 8002536:	bf00      	nop
 8002538:	200000f2 	.word	0x200000f2

0800253c <__sinit_lock_release>:
 800253c:	4801      	ldr	r0, [pc, #4]	; (8002544 <__sinit_lock_release+0x8>)
 800253e:	f000 b8a2 	b.w	8002686 <__retarget_lock_release_recursive>
 8002542:	bf00      	nop
 8002544:	200000f2 	.word	0x200000f2

08002548 <__sinit>:
 8002548:	b510      	push	{r4, lr}
 800254a:	4604      	mov	r4, r0
 800254c:	f7ff fff0 	bl	8002530 <__sinit_lock_acquire>
 8002550:	69a3      	ldr	r3, [r4, #24]
 8002552:	b11b      	cbz	r3, 800255c <__sinit+0x14>
 8002554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002558:	f7ff bff0 	b.w	800253c <__sinit_lock_release>
 800255c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002560:	6523      	str	r3, [r4, #80]	; 0x50
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <__sinit+0x68>)
 8002564:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <__sinit+0x6c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	62a2      	str	r2, [r4, #40]	; 0x28
 800256a:	42a3      	cmp	r3, r4
 800256c:	bf08      	it	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	4620      	mov	r0, r4
 8002572:	bf08      	it	eq
 8002574:	61a3      	streq	r3, [r4, #24]
 8002576:	f000 f81f 	bl	80025b8 <__sfp>
 800257a:	6060      	str	r0, [r4, #4]
 800257c:	4620      	mov	r0, r4
 800257e:	f000 f81b 	bl	80025b8 <__sfp>
 8002582:	60a0      	str	r0, [r4, #8]
 8002584:	4620      	mov	r0, r4
 8002586:	f000 f817 	bl	80025b8 <__sfp>
 800258a:	2200      	movs	r2, #0
 800258c:	2104      	movs	r1, #4
 800258e:	60e0      	str	r0, [r4, #12]
 8002590:	6860      	ldr	r0, [r4, #4]
 8002592:	f7ff ff81 	bl	8002498 <std>
 8002596:	2201      	movs	r2, #1
 8002598:	2109      	movs	r1, #9
 800259a:	68a0      	ldr	r0, [r4, #8]
 800259c:	f7ff ff7c 	bl	8002498 <std>
 80025a0:	2202      	movs	r2, #2
 80025a2:	2112      	movs	r1, #18
 80025a4:	68e0      	ldr	r0, [r4, #12]
 80025a6:	f7ff ff77 	bl	8002498 <std>
 80025aa:	2301      	movs	r3, #1
 80025ac:	61a3      	str	r3, [r4, #24]
 80025ae:	e7d1      	b.n	8002554 <__sinit+0xc>
 80025b0:	08002c6c 	.word	0x08002c6c
 80025b4:	080024e1 	.word	0x080024e1

080025b8 <__sfp>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	4607      	mov	r7, r0
 80025bc:	f7ff ffac 	bl	8002518 <__sfp_lock_acquire>
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <__sfp+0x84>)
 80025c2:	681e      	ldr	r6, [r3, #0]
 80025c4:	69b3      	ldr	r3, [r6, #24]
 80025c6:	b913      	cbnz	r3, 80025ce <__sfp+0x16>
 80025c8:	4630      	mov	r0, r6
 80025ca:	f7ff ffbd 	bl	8002548 <__sinit>
 80025ce:	3648      	adds	r6, #72	; 0x48
 80025d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	d503      	bpl.n	80025e0 <__sfp+0x28>
 80025d8:	6833      	ldr	r3, [r6, #0]
 80025da:	b30b      	cbz	r3, 8002620 <__sfp+0x68>
 80025dc:	6836      	ldr	r6, [r6, #0]
 80025de:	e7f7      	b.n	80025d0 <__sfp+0x18>
 80025e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80025e4:	b9d5      	cbnz	r5, 800261c <__sfp+0x64>
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <__sfp+0x88>)
 80025e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80025ec:	60e3      	str	r3, [r4, #12]
 80025ee:	6665      	str	r5, [r4, #100]	; 0x64
 80025f0:	f000 f847 	bl	8002682 <__retarget_lock_init_recursive>
 80025f4:	f7ff ff96 	bl	8002524 <__sfp_lock_release>
 80025f8:	2208      	movs	r2, #8
 80025fa:	4629      	mov	r1, r5
 80025fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002604:	6025      	str	r5, [r4, #0]
 8002606:	61a5      	str	r5, [r4, #24]
 8002608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800260c:	f7ff fd48 	bl	80020a0 <memset>
 8002610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002618:	4620      	mov	r0, r4
 800261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800261c:	3468      	adds	r4, #104	; 0x68
 800261e:	e7d9      	b.n	80025d4 <__sfp+0x1c>
 8002620:	2104      	movs	r1, #4
 8002622:	4638      	mov	r0, r7
 8002624:	f7ff ff62 	bl	80024ec <__sfmoreglue>
 8002628:	4604      	mov	r4, r0
 800262a:	6030      	str	r0, [r6, #0]
 800262c:	2800      	cmp	r0, #0
 800262e:	d1d5      	bne.n	80025dc <__sfp+0x24>
 8002630:	f7ff ff78 	bl	8002524 <__sfp_lock_release>
 8002634:	230c      	movs	r3, #12
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	e7ee      	b.n	8002618 <__sfp+0x60>
 800263a:	bf00      	nop
 800263c:	08002c6c 	.word	0x08002c6c
 8002640:	ffff0001 	.word	0xffff0001

08002644 <_fwalk_reent>:
 8002644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002648:	4606      	mov	r6, r0
 800264a:	4688      	mov	r8, r1
 800264c:	2700      	movs	r7, #0
 800264e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002656:	f1b9 0901 	subs.w	r9, r9, #1
 800265a:	d505      	bpl.n	8002668 <_fwalk_reent+0x24>
 800265c:	6824      	ldr	r4, [r4, #0]
 800265e:	2c00      	cmp	r4, #0
 8002660:	d1f7      	bne.n	8002652 <_fwalk_reent+0xe>
 8002662:	4638      	mov	r0, r7
 8002664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002668:	89ab      	ldrh	r3, [r5, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d907      	bls.n	800267e <_fwalk_reent+0x3a>
 800266e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002672:	3301      	adds	r3, #1
 8002674:	d003      	beq.n	800267e <_fwalk_reent+0x3a>
 8002676:	4629      	mov	r1, r5
 8002678:	4630      	mov	r0, r6
 800267a:	47c0      	blx	r8
 800267c:	4307      	orrs	r7, r0
 800267e:	3568      	adds	r5, #104	; 0x68
 8002680:	e7e9      	b.n	8002656 <_fwalk_reent+0x12>

08002682 <__retarget_lock_init_recursive>:
 8002682:	4770      	bx	lr

08002684 <__retarget_lock_acquire_recursive>:
 8002684:	4770      	bx	lr

08002686 <__retarget_lock_release_recursive>:
 8002686:	4770      	bx	lr

08002688 <__swhatbuf_r>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	460e      	mov	r6, r1
 800268c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002690:	4614      	mov	r4, r2
 8002692:	2900      	cmp	r1, #0
 8002694:	461d      	mov	r5, r3
 8002696:	b096      	sub	sp, #88	; 0x58
 8002698:	da08      	bge.n	80026ac <__swhatbuf_r+0x24>
 800269a:	2200      	movs	r2, #0
 800269c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026a0:	602a      	str	r2, [r5, #0]
 80026a2:	061a      	lsls	r2, r3, #24
 80026a4:	d410      	bmi.n	80026c8 <__swhatbuf_r+0x40>
 80026a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026aa:	e00e      	b.n	80026ca <__swhatbuf_r+0x42>
 80026ac:	466a      	mov	r2, sp
 80026ae:	f000 f9a3 	bl	80029f8 <_fstat_r>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	dbf1      	blt.n	800269a <__swhatbuf_r+0x12>
 80026b6:	9a01      	ldr	r2, [sp, #4]
 80026b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026c0:	425a      	negs	r2, r3
 80026c2:	415a      	adcs	r2, r3
 80026c4:	602a      	str	r2, [r5, #0]
 80026c6:	e7ee      	b.n	80026a6 <__swhatbuf_r+0x1e>
 80026c8:	2340      	movs	r3, #64	; 0x40
 80026ca:	2000      	movs	r0, #0
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	b016      	add	sp, #88	; 0x58
 80026d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026d4 <__smakebuf_r>:
 80026d4:	898b      	ldrh	r3, [r1, #12]
 80026d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026d8:	079d      	lsls	r5, r3, #30
 80026da:	4606      	mov	r6, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	d507      	bpl.n	80026f0 <__smakebuf_r+0x1c>
 80026e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026e4:	6023      	str	r3, [r4, #0]
 80026e6:	6123      	str	r3, [r4, #16]
 80026e8:	2301      	movs	r3, #1
 80026ea:	6163      	str	r3, [r4, #20]
 80026ec:	b002      	add	sp, #8
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	466a      	mov	r2, sp
 80026f2:	ab01      	add	r3, sp, #4
 80026f4:	f7ff ffc8 	bl	8002688 <__swhatbuf_r>
 80026f8:	9900      	ldr	r1, [sp, #0]
 80026fa:	4605      	mov	r5, r0
 80026fc:	4630      	mov	r0, r6
 80026fe:	f000 f891 	bl	8002824 <_malloc_r>
 8002702:	b948      	cbnz	r0, 8002718 <__smakebuf_r+0x44>
 8002704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002708:	059a      	lsls	r2, r3, #22
 800270a:	d4ef      	bmi.n	80026ec <__smakebuf_r+0x18>
 800270c:	f023 0303 	bic.w	r3, r3, #3
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	81a3      	strh	r3, [r4, #12]
 8002716:	e7e3      	b.n	80026e0 <__smakebuf_r+0xc>
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <__smakebuf_r+0x7c>)
 800271a:	62b3      	str	r3, [r6, #40]	; 0x28
 800271c:	89a3      	ldrh	r3, [r4, #12]
 800271e:	6020      	str	r0, [r4, #0]
 8002720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002724:	81a3      	strh	r3, [r4, #12]
 8002726:	9b00      	ldr	r3, [sp, #0]
 8002728:	6120      	str	r0, [r4, #16]
 800272a:	6163      	str	r3, [r4, #20]
 800272c:	9b01      	ldr	r3, [sp, #4]
 800272e:	b15b      	cbz	r3, 8002748 <__smakebuf_r+0x74>
 8002730:	4630      	mov	r0, r6
 8002732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002736:	f000 f971 	bl	8002a1c <_isatty_r>
 800273a:	b128      	cbz	r0, 8002748 <__smakebuf_r+0x74>
 800273c:	89a3      	ldrh	r3, [r4, #12]
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	81a3      	strh	r3, [r4, #12]
 8002748:	89a0      	ldrh	r0, [r4, #12]
 800274a:	4305      	orrs	r5, r0
 800274c:	81a5      	strh	r5, [r4, #12]
 800274e:	e7cd      	b.n	80026ec <__smakebuf_r+0x18>
 8002750:	080024e1 	.word	0x080024e1

08002754 <_free_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4605      	mov	r5, r0
 8002758:	2900      	cmp	r1, #0
 800275a:	d040      	beq.n	80027de <_free_r+0x8a>
 800275c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002760:	1f0c      	subs	r4, r1, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	bfb8      	it	lt
 8002766:	18e4      	addlt	r4, r4, r3
 8002768:	f000 f97a 	bl	8002a60 <__malloc_lock>
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <_free_r+0x8c>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	b933      	cbnz	r3, 8002780 <_free_r+0x2c>
 8002772:	6063      	str	r3, [r4, #4]
 8002774:	6014      	str	r4, [r2, #0]
 8002776:	4628      	mov	r0, r5
 8002778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800277c:	f000 b976 	b.w	8002a6c <__malloc_unlock>
 8002780:	42a3      	cmp	r3, r4
 8002782:	d908      	bls.n	8002796 <_free_r+0x42>
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	1821      	adds	r1, r4, r0
 8002788:	428b      	cmp	r3, r1
 800278a:	bf01      	itttt	eq
 800278c:	6819      	ldreq	r1, [r3, #0]
 800278e:	685b      	ldreq	r3, [r3, #4]
 8002790:	1809      	addeq	r1, r1, r0
 8002792:	6021      	streq	r1, [r4, #0]
 8002794:	e7ed      	b.n	8002772 <_free_r+0x1e>
 8002796:	461a      	mov	r2, r3
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b10b      	cbz	r3, 80027a0 <_free_r+0x4c>
 800279c:	42a3      	cmp	r3, r4
 800279e:	d9fa      	bls.n	8002796 <_free_r+0x42>
 80027a0:	6811      	ldr	r1, [r2, #0]
 80027a2:	1850      	adds	r0, r2, r1
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	d10b      	bne.n	80027c0 <_free_r+0x6c>
 80027a8:	6820      	ldr	r0, [r4, #0]
 80027aa:	4401      	add	r1, r0
 80027ac:	1850      	adds	r0, r2, r1
 80027ae:	4283      	cmp	r3, r0
 80027b0:	6011      	str	r1, [r2, #0]
 80027b2:	d1e0      	bne.n	8002776 <_free_r+0x22>
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4401      	add	r1, r0
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	6053      	str	r3, [r2, #4]
 80027be:	e7da      	b.n	8002776 <_free_r+0x22>
 80027c0:	d902      	bls.n	80027c8 <_free_r+0x74>
 80027c2:	230c      	movs	r3, #12
 80027c4:	602b      	str	r3, [r5, #0]
 80027c6:	e7d6      	b.n	8002776 <_free_r+0x22>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	1821      	adds	r1, r4, r0
 80027cc:	428b      	cmp	r3, r1
 80027ce:	bf01      	itttt	eq
 80027d0:	6819      	ldreq	r1, [r3, #0]
 80027d2:	685b      	ldreq	r3, [r3, #4]
 80027d4:	1809      	addeq	r1, r1, r0
 80027d6:	6021      	streq	r1, [r4, #0]
 80027d8:	6063      	str	r3, [r4, #4]
 80027da:	6054      	str	r4, [r2, #4]
 80027dc:	e7cb      	b.n	8002776 <_free_r+0x22>
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	200000f4 	.word	0x200000f4

080027e4 <sbrk_aligned>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4e0e      	ldr	r6, [pc, #56]	; (8002820 <sbrk_aligned+0x3c>)
 80027e8:	460c      	mov	r4, r1
 80027ea:	6831      	ldr	r1, [r6, #0]
 80027ec:	4605      	mov	r5, r0
 80027ee:	b911      	cbnz	r1, 80027f6 <sbrk_aligned+0x12>
 80027f0:	f000 f88c 	bl	800290c <_sbrk_r>
 80027f4:	6030      	str	r0, [r6, #0]
 80027f6:	4621      	mov	r1, r4
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 f887 	bl	800290c <_sbrk_r>
 80027fe:	1c43      	adds	r3, r0, #1
 8002800:	d00a      	beq.n	8002818 <sbrk_aligned+0x34>
 8002802:	1cc4      	adds	r4, r0, #3
 8002804:	f024 0403 	bic.w	r4, r4, #3
 8002808:	42a0      	cmp	r0, r4
 800280a:	d007      	beq.n	800281c <sbrk_aligned+0x38>
 800280c:	1a21      	subs	r1, r4, r0
 800280e:	4628      	mov	r0, r5
 8002810:	f000 f87c 	bl	800290c <_sbrk_r>
 8002814:	3001      	adds	r0, #1
 8002816:	d101      	bne.n	800281c <sbrk_aligned+0x38>
 8002818:	f04f 34ff 	mov.w	r4, #4294967295
 800281c:	4620      	mov	r0, r4
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	200000f8 	.word	0x200000f8

08002824 <_malloc_r>:
 8002824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002828:	1ccd      	adds	r5, r1, #3
 800282a:	f025 0503 	bic.w	r5, r5, #3
 800282e:	3508      	adds	r5, #8
 8002830:	2d0c      	cmp	r5, #12
 8002832:	bf38      	it	cc
 8002834:	250c      	movcc	r5, #12
 8002836:	2d00      	cmp	r5, #0
 8002838:	4607      	mov	r7, r0
 800283a:	db01      	blt.n	8002840 <_malloc_r+0x1c>
 800283c:	42a9      	cmp	r1, r5
 800283e:	d905      	bls.n	800284c <_malloc_r+0x28>
 8002840:	230c      	movs	r3, #12
 8002842:	2600      	movs	r6, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4630      	mov	r0, r6
 8002848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800284c:	4e2e      	ldr	r6, [pc, #184]	; (8002908 <_malloc_r+0xe4>)
 800284e:	f000 f907 	bl	8002a60 <__malloc_lock>
 8002852:	6833      	ldr	r3, [r6, #0]
 8002854:	461c      	mov	r4, r3
 8002856:	bb34      	cbnz	r4, 80028a6 <_malloc_r+0x82>
 8002858:	4629      	mov	r1, r5
 800285a:	4638      	mov	r0, r7
 800285c:	f7ff ffc2 	bl	80027e4 <sbrk_aligned>
 8002860:	1c43      	adds	r3, r0, #1
 8002862:	4604      	mov	r4, r0
 8002864:	d14d      	bne.n	8002902 <_malloc_r+0xde>
 8002866:	6834      	ldr	r4, [r6, #0]
 8002868:	4626      	mov	r6, r4
 800286a:	2e00      	cmp	r6, #0
 800286c:	d140      	bne.n	80028f0 <_malloc_r+0xcc>
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	4631      	mov	r1, r6
 8002872:	4638      	mov	r0, r7
 8002874:	eb04 0803 	add.w	r8, r4, r3
 8002878:	f000 f848 	bl	800290c <_sbrk_r>
 800287c:	4580      	cmp	r8, r0
 800287e:	d13a      	bne.n	80028f6 <_malloc_r+0xd2>
 8002880:	6821      	ldr	r1, [r4, #0]
 8002882:	3503      	adds	r5, #3
 8002884:	1a6d      	subs	r5, r5, r1
 8002886:	f025 0503 	bic.w	r5, r5, #3
 800288a:	3508      	adds	r5, #8
 800288c:	2d0c      	cmp	r5, #12
 800288e:	bf38      	it	cc
 8002890:	250c      	movcc	r5, #12
 8002892:	4638      	mov	r0, r7
 8002894:	4629      	mov	r1, r5
 8002896:	f7ff ffa5 	bl	80027e4 <sbrk_aligned>
 800289a:	3001      	adds	r0, #1
 800289c:	d02b      	beq.n	80028f6 <_malloc_r+0xd2>
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	442b      	add	r3, r5
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	e00e      	b.n	80028c4 <_malloc_r+0xa0>
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	1b52      	subs	r2, r2, r5
 80028aa:	d41e      	bmi.n	80028ea <_malloc_r+0xc6>
 80028ac:	2a0b      	cmp	r2, #11
 80028ae:	d916      	bls.n	80028de <_malloc_r+0xba>
 80028b0:	1961      	adds	r1, r4, r5
 80028b2:	42a3      	cmp	r3, r4
 80028b4:	6025      	str	r5, [r4, #0]
 80028b6:	bf18      	it	ne
 80028b8:	6059      	strne	r1, [r3, #4]
 80028ba:	6863      	ldr	r3, [r4, #4]
 80028bc:	bf08      	it	eq
 80028be:	6031      	streq	r1, [r6, #0]
 80028c0:	5162      	str	r2, [r4, r5]
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	4638      	mov	r0, r7
 80028c6:	f104 060b 	add.w	r6, r4, #11
 80028ca:	f000 f8cf 	bl	8002a6c <__malloc_unlock>
 80028ce:	f026 0607 	bic.w	r6, r6, #7
 80028d2:	1d23      	adds	r3, r4, #4
 80028d4:	1af2      	subs	r2, r6, r3
 80028d6:	d0b6      	beq.n	8002846 <_malloc_r+0x22>
 80028d8:	1b9b      	subs	r3, r3, r6
 80028da:	50a3      	str	r3, [r4, r2]
 80028dc:	e7b3      	b.n	8002846 <_malloc_r+0x22>
 80028de:	6862      	ldr	r2, [r4, #4]
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	bf0c      	ite	eq
 80028e4:	6032      	streq	r2, [r6, #0]
 80028e6:	605a      	strne	r2, [r3, #4]
 80028e8:	e7ec      	b.n	80028c4 <_malloc_r+0xa0>
 80028ea:	4623      	mov	r3, r4
 80028ec:	6864      	ldr	r4, [r4, #4]
 80028ee:	e7b2      	b.n	8002856 <_malloc_r+0x32>
 80028f0:	4634      	mov	r4, r6
 80028f2:	6876      	ldr	r6, [r6, #4]
 80028f4:	e7b9      	b.n	800286a <_malloc_r+0x46>
 80028f6:	230c      	movs	r3, #12
 80028f8:	4638      	mov	r0, r7
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	f000 f8b6 	bl	8002a6c <__malloc_unlock>
 8002900:	e7a1      	b.n	8002846 <_malloc_r+0x22>
 8002902:	6025      	str	r5, [r4, #0]
 8002904:	e7de      	b.n	80028c4 <_malloc_r+0xa0>
 8002906:	bf00      	nop
 8002908:	200000f4 	.word	0x200000f4

0800290c <_sbrk_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	2300      	movs	r3, #0
 8002910:	4d05      	ldr	r5, [pc, #20]	; (8002928 <_sbrk_r+0x1c>)
 8002912:	4604      	mov	r4, r0
 8002914:	4608      	mov	r0, r1
 8002916:	602b      	str	r3, [r5, #0]
 8002918:	f7fd fe7a 	bl	8000610 <_sbrk>
 800291c:	1c43      	adds	r3, r0, #1
 800291e:	d102      	bne.n	8002926 <_sbrk_r+0x1a>
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	b103      	cbz	r3, 8002926 <_sbrk_r+0x1a>
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	bd38      	pop	{r3, r4, r5, pc}
 8002928:	200000fc 	.word	0x200000fc

0800292c <__sread>:
 800292c:	b510      	push	{r4, lr}
 800292e:	460c      	mov	r4, r1
 8002930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002934:	f000 f8a0 	bl	8002a78 <_read_r>
 8002938:	2800      	cmp	r0, #0
 800293a:	bfab      	itete	ge
 800293c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800293e:	89a3      	ldrhlt	r3, [r4, #12]
 8002940:	181b      	addge	r3, r3, r0
 8002942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002946:	bfac      	ite	ge
 8002948:	6563      	strge	r3, [r4, #84]	; 0x54
 800294a:	81a3      	strhlt	r3, [r4, #12]
 800294c:	bd10      	pop	{r4, pc}

0800294e <__swrite>:
 800294e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002952:	461f      	mov	r7, r3
 8002954:	898b      	ldrh	r3, [r1, #12]
 8002956:	4605      	mov	r5, r0
 8002958:	05db      	lsls	r3, r3, #23
 800295a:	460c      	mov	r4, r1
 800295c:	4616      	mov	r6, r2
 800295e:	d505      	bpl.n	800296c <__swrite+0x1e>
 8002960:	2302      	movs	r3, #2
 8002962:	2200      	movs	r2, #0
 8002964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002968:	f000 f868 	bl	8002a3c <_lseek_r>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	4632      	mov	r2, r6
 8002970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	4628      	mov	r0, r5
 8002978:	463b      	mov	r3, r7
 800297a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800297e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002982:	f000 b817 	b.w	80029b4 <_write_r>

08002986 <__sseek>:
 8002986:	b510      	push	{r4, lr}
 8002988:	460c      	mov	r4, r1
 800298a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298e:	f000 f855 	bl	8002a3c <_lseek_r>
 8002992:	1c43      	adds	r3, r0, #1
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	bf15      	itete	ne
 8002998:	6560      	strne	r0, [r4, #84]	; 0x54
 800299a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800299e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029a2:	81a3      	strheq	r3, [r4, #12]
 80029a4:	bf18      	it	ne
 80029a6:	81a3      	strhne	r3, [r4, #12]
 80029a8:	bd10      	pop	{r4, pc}

080029aa <__sclose>:
 80029aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ae:	f000 b813 	b.w	80029d8 <_close_r>
	...

080029b4 <_write_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4604      	mov	r4, r0
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	2200      	movs	r2, #0
 80029be:	4d05      	ldr	r5, [pc, #20]	; (80029d4 <_write_r+0x20>)
 80029c0:	602a      	str	r2, [r5, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f7fd fdd8 	bl	8000578 <_write>
 80029c8:	1c43      	adds	r3, r0, #1
 80029ca:	d102      	bne.n	80029d2 <_write_r+0x1e>
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	b103      	cbz	r3, 80029d2 <_write_r+0x1e>
 80029d0:	6023      	str	r3, [r4, #0]
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
 80029d4:	200000fc 	.word	0x200000fc

080029d8 <_close_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	2300      	movs	r3, #0
 80029dc:	4d05      	ldr	r5, [pc, #20]	; (80029f4 <_close_r+0x1c>)
 80029de:	4604      	mov	r4, r0
 80029e0:	4608      	mov	r0, r1
 80029e2:	602b      	str	r3, [r5, #0]
 80029e4:	f7fd fde4 	bl	80005b0 <_close>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_close_r+0x1a>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_close_r+0x1a>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200000fc 	.word	0x200000fc

080029f8 <_fstat_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	2300      	movs	r3, #0
 80029fc:	4d06      	ldr	r5, [pc, #24]	; (8002a18 <_fstat_r+0x20>)
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	f7fd fdde 	bl	80005c6 <_fstat>
 8002a0a:	1c43      	adds	r3, r0, #1
 8002a0c:	d102      	bne.n	8002a14 <_fstat_r+0x1c>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b103      	cbz	r3, 8002a14 <_fstat_r+0x1c>
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
 8002a16:	bf00      	nop
 8002a18:	200000fc 	.word	0x200000fc

08002a1c <_isatty_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	2300      	movs	r3, #0
 8002a20:	4d05      	ldr	r5, [pc, #20]	; (8002a38 <_isatty_r+0x1c>)
 8002a22:	4604      	mov	r4, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	f7fd fddc 	bl	80005e4 <_isatty>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d102      	bne.n	8002a36 <_isatty_r+0x1a>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	b103      	cbz	r3, 8002a36 <_isatty_r+0x1a>
 8002a34:	6023      	str	r3, [r4, #0]
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
 8002a38:	200000fc 	.word	0x200000fc

08002a3c <_lseek_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	2200      	movs	r2, #0
 8002a46:	4d05      	ldr	r5, [pc, #20]	; (8002a5c <_lseek_r+0x20>)
 8002a48:	602a      	str	r2, [r5, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7fd fdd4 	bl	80005f8 <_lseek>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d102      	bne.n	8002a5a <_lseek_r+0x1e>
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	b103      	cbz	r3, 8002a5a <_lseek_r+0x1e>
 8002a58:	6023      	str	r3, [r4, #0]
 8002a5a:	bd38      	pop	{r3, r4, r5, pc}
 8002a5c:	200000fc 	.word	0x200000fc

08002a60 <__malloc_lock>:
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <__malloc_lock+0x8>)
 8002a62:	f7ff be0f 	b.w	8002684 <__retarget_lock_acquire_recursive>
 8002a66:	bf00      	nop
 8002a68:	200000f0 	.word	0x200000f0

08002a6c <__malloc_unlock>:
 8002a6c:	4801      	ldr	r0, [pc, #4]	; (8002a74 <__malloc_unlock+0x8>)
 8002a6e:	f7ff be0a 	b.w	8002686 <__retarget_lock_release_recursive>
 8002a72:	bf00      	nop
 8002a74:	200000f0 	.word	0x200000f0

08002a78 <_read_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	2200      	movs	r2, #0
 8002a82:	4d05      	ldr	r5, [pc, #20]	; (8002a98 <_read_r+0x20>)
 8002a84:	602a      	str	r2, [r5, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7fd fd59 	bl	800053e <_read>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d102      	bne.n	8002a96 <_read_r+0x1e>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	b103      	cbz	r3, 8002a96 <_read_r+0x1e>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
 8002a98:	200000fc 	.word	0x200000fc

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
